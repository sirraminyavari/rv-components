@use 'sass:math';
@use 'sass:color';
@use 'sass:list';
@use 'sass:meta';
@use 'sass:map';
@use './variables';

@mixin for-size($size) {
  @if $size ==phone-only {
    @media (max-width: $screenSizePhoneMax) {
      @content;
    }
  } @else if $size ==tablet-portrait-up {
    @media (min-width: $screenSizeTabletPortraitMin) {
      @content;
    }
  } @else if $size ==tablet-landscape-up {
    @media (min-width: $screenSizeTabletLandscapeMin) {
      @content;
    }
  } @else if $size ==desktop-up {
    @media (min-width: $screenSizeDesktopMin) {
      @content;
    }
  } @else if $size ==big-desktop-up {
    @media (min-width: $screenSizeLargeDesktopMin) {
      @content;
    }
  }
}
@mixin selection {
  ::selection {
    @content;
  }
}

@mixin full-width {
  .fullWidth {
    width: clamp(0%, calc(100% - 0.3rem), 100vw);
  }
}

@mixin dir {
  @if not global-variable-exists(exclude-rtl-from-bundle) or not $exclude-rtl-from-bundle {
    .direction-ltr {
      direction: ltr;
    }

    .direction-rtl {
      direction: rtl;
    }
  }
}

@mixin on-rtl {
  [class^='direction-rtl'] {
    @content;
  }
}

@mixin bundle-partial($component-name, $component-variant: null) {
  @if not global-variable-exists(exclude-from-bundle) {
    @content;
  } @else {
    @if $component-variant ==null {
      $bundleStatus: map.get($exclude-from-bundle, $component-name, 'base');

      @if $bundleStatus {
        // @debug 'excluding styles for component "#{$component-name}" from css bundle';
      } @else {
        @content;
      }
    } @else {
      $bundleStatus: map.get($exclude-from-bundle, $component-name, $component-variant);

      @if $bundleStatus {
        // @debug 'excluding styles for component "#{$component-name}" (#{$component-variant}) from css bundle';
      } @else {
        @content;
      }
    }
  }
}

@mixin rtl-bundle($component-name: null) {
  @if not global-variable-exists(exclude-rtl-from-bundle) or not $exclude-rtl-from-bundle {
    @content;
  } @else if global-variable-exists(exclude-rtl-from-bundle) and $exclude-rtl-from-bundle {
    // @debug 'excluding RTL styles for all components from css bundle';
  } @else if $component-name {
    @if not global-variable-exists(exclude-from-bundle) {
      @content;
    } @else {
      $rtlBundleStatus: map.get($exclude-from-bundle, $component-name, 'rtl');

      @if $rtlBundleStatus {
        // @debug 'excluding styles for component "#{$component-name}" (RTL) from css bundle';
      } @else {
        @content;
      }
    }
  }
}

@mixin palette-class-variables($themeName, $localPaletteName) {
  @if $localPaletteName != 'black' and $localPaletteName != 'white' {
    @each $paletteSwatch, $color in map.get($theme-variants, $themeName, $localPaletteName) {
      --#{$localPaletteName}-#{$paletteSwatch}: #{color-hsl-args($color)};
      --#{$localPaletteName}-#{$paletteSwatch}-font: #{color-hsl-args(
          black-or-white-color(
            $color,
            map.get($theme-variants, $themeName, 'black'),
            map.get($theme-variants, $themeName, 'white')
          )
        )}
        .#{$localPaletteName} {
        @each $paletteSwatchName, $color in map.get($theme-variants, $themeName, $localPaletteName)
        {
          --#{$paletteSwatch}: #{color-hsl-args($color)};
          --#{$paletteSwatch}-font: #{color-hsl-args(
              black-or-white-color(
                $color,
                map.get($theme-variants, $themeName, 'black'),
                map.get($theme-variants, $themeName, 'white')
              )
            )};
        }
      }
    }

    .#{$localPaletteName} {
      @each $paletteSwatch, $color in map.get($theme-variants, $themeName, $localPaletteName) {
        --#{$paletteSwatch}: #{color-hsl-args($color)};
        --#{$paletteSwatch}-font: #{color-hsl-args(
            black-or-white-color(
              $color,
              map.get($theme-variants, $themeName, 'black'),
              map.get($theme-variants, $themeName, 'white')
            )
          )};
      }
    }
  }
}

@mixin palette-theme-class-generator-loop {
  @each $themeName, $localPaletteName in $theme-variants {
    .#{$themeName} {
      --white: #{color-hsl-args(map.get($theme-variants, $themeName, 'white'))};
      --black: #{color-hsl-args(map.get($theme-variants, $themeName, 'black'))};

      @each $localPaletteName, $color in map.get($theme-variants, $themeName) {
        @include palette-class-variables('#{$themeName}', '#{$localPaletteName}');
      }
    }
  }
}

@mixin action-hover {
  &:not([disabled]):hover {
    @content;
  }
}

@mixin action-active {
  &:not([disabled]):active {
    @content;
  }
}

@mixin action-focus {
  &:not([disabled]):focus {
    @content;
  }
}

@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

@mixin truncate($truncation-boundary: null) {
  @if variable-exists(truncation-boundary) {
    max-width: $truncation-boundary;
  }

  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin sr-only {
  clip: rect(0, 0, 0, 0);
  border-width: 0;
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}
